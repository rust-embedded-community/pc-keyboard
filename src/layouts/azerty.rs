//! French keyboard support

use crate::{
    DecodedKey, HandleControl, KeyCode, KeyboardLayout, Modifiers, PhysicalKeyboard, QUO, SLS,
};

/// A standard French 102-key (or 105-key including Windows keys) keyboard.
///
/// The top row spells `AZERTY`. Has a 2-row high Enter key, with Oem5 next to
/// the left shift (ISO format).
///
/// NB: no "dead key" support for now
///
/// These diagrams illustrate the conversion from [`KeyCode`] to Unicode. We
/// show either a Unicode glyph, or a hex number if the glyph isn't a
/// printable character. Blank spaces are passed through as
/// [`DecodedKey::RawKey`].
///
/// Run the `print_keyboard` example to re-generate these images.
///
/// ## Unmodified
///
/// ```text
/// ┌────┐  ┌────┬────┬────┬────┐  ┌────┬────┬────┬────┐  ┌────┬────┬────┬────┐   ┌────┬────┬────┐
/// │001b│  │    │    │    │    │  │    │    │    │    │  │    │    │    │    │   │    │    │    │
/// └────┘  └────┴────┴────┴────┘  └────┴────┴────┴────┘  └────┴────┴────┴────┘   └────┴────┴────┘
///
/// ┌────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬─────────┐  ┌────┬────┬────┐  ┌────┬────┬────┬────┐
/// │ ²  │ &  │ é  │ "  │ '  │ (  │ -  │ è  │ _  │ ç  │ à  │ )  │ =  │   0008  │  │    │    │    │  │    │ /  │ *  │ -  │
/// ├────┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬────────┤  ├────┼────┼────┤  ├────┼────┼────┼────┤
/// │0009 │ a  │ z  │ e  │ r  │ t  │ y  │ u  │ i  │ o  │ p  │ ^  │ $  │  000a  │  │007f│    │    │  │ 7  │ 8  │ 9  │    │
/// ├─────┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┐       │  └────┴────┴────┘  ├────┼────┼────┤ +  │
/// │      │ q  │ s  │ d  │ f  │ g  │ h  │ j  │ k  │ l  │ m  │ ù  │ *  │       │                    │ 4  │ 5  │ 6  │    │
/// ├────┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴────┴───────┤       ┌────┐       ├────┼────┼────┼────┤
/// │    │ <  │ w  │ x  │ c  │ v  │ b  │ n  │ ,  │ ;  │ :  │ !  │              │       │    │       │ 1  │ 2  │ 3  │    │
/// ├────┴┬───┴─┬──┴──┬─┴────┴────┴────┴────┴────┴───┬┴────┼────┴┬──────┬──────┤  ┌────┼────┼────┐  ├────┴────┼────┤000a│
/// │     │     │     │             0020             │     │     │      │      │  │    │    │    │  │ 0       │ .  │    │
/// └─────┴─────┴─────┴──────────────────────────────┴─────┴─────┴──────┴──────┘  └────┴────┴────┘  └─────────┴────┴────┘
/// ```
///
/// ## Caps Lock
///
/// ```text
/// ┌────┐  ┌────┬────┬────┬────┐  ┌────┬────┬────┬────┐  ┌────┬────┬────┬────┐   ┌────┬────┬────┐
/// │001b│  │    │    │    │    │  │    │    │    │    │  │    │    │    │    │   │    │    │    │
/// └────┘  └────┴────┴────┴────┘  └────┴────┴────┴────┘  └────┴────┴────┴────┘   └────┴────┴────┘
///
/// ┌────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬─────────┐  ┌────┬────┬────┐  ┌────┬────┬────┬────┐
/// │ ²  │ &  │ é  │ "  │ '  │ (  │ -  │ è  │ _  │ ç  │ à  │ )  │ =  │   0008  │  │    │    │    │  │    │ /  │ *  │ -  │
/// ├────┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬────────┤  ├────┼────┼────┤  ├────┼────┼────┼────┤
/// │0009 │ A  │ Z  │ E  │ R  │ T  │ Y  │ U  │ I  │ O  │ P  │ ^  │ $  │  000a  │  │007f│    │    │  │ 7  │ 8  │ 9  │    │
/// ├─────┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┐       │  └────┴────┴────┘  ├────┼────┼────┤ +  │
/// │      │ Q  │ S  │ D  │ F  │ G  │ H  │ J  │ K  │ L  │ M  │ ù  │ *  │       │                    │ 4  │ 5  │ 6  │    │
/// ├────┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴────┴───────┤       ┌────┐       ├────┼────┼────┼────┤
/// │    │ <  │ W  │ X  │ C  │ V  │ B  │ N  │ ,  │ ;  │ :  │ !  │              │       │    │       │ 1  │ 2  │ 3  │    │
/// ├────┴┬───┴─┬──┴──┬─┴────┴────┴────┴────┴────┴───┬┴────┼────┴┬──────┬──────┤  ┌────┼────┼────┐  ├────┴────┼────┤000a│
/// │     │     │     │             0020             │     │     │      │      │  │    │    │    │  │ 0       │ .  │    │
/// └─────┴─────┴─────┴──────────────────────────────┴─────┴─────┴──────┴──────┘  └────┴────┴────┘  └─────────┴────┴────┘
/// ```
///
/// ## Shifted
///
/// ```text
/// ┌────┐  ┌────┬────┬────┬────┐  ┌────┬────┬────┬────┐  ┌────┬────┬────┬────┐   ┌────┬────┬────┐
/// │001b│  │    │    │    │    │  │    │    │    │    │  │    │    │    │    │   │    │    │    │
/// └────┘  └────┴────┴────┴────┘  └────┴────┴────┴────┘  └────┴────┴────┴────┘   └────┴────┴────┘
///
/// ┌────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬─────────┐  ┌────┬────┬────┐  ┌────┬────┬────┬────┐
/// │ ²  │ 1  │ 2  │ 3  │ 4  │ 5  │ 6  │ 7  │ 8  │ 9  │ 0  │ °  │ +  │   0008  │  │    │    │    │  │    │ /  │ *  │ -  │
/// ├────┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬────────┤  ├────┼────┼────┤  ├────┼────┼────┼────┤
/// │0009 │ A  │ Z  │ E  │ R  │ T  │ Y  │ U  │ I  │ O  │ P  │ ¨  │ £  │  000a  │  │007f│    │    │  │ 7  │ 8  │ 9  │    │
/// ├─────┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┐       │  └────┴────┴────┘  ├────┼────┼────┤ +  │
/// │      │ Q  │ S  │ D  │ F  │ G  │ H  │ J  │ K  │ L  │ M  │ %  │ µ  │       │                    │ 4  │ 5  │ 6  │    │
/// ├────┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴────┴───────┤       ┌────┐       ├────┼────┼────┼────┤
/// │    │ >  │ W  │ X  │ C  │ V  │ B  │ N  │ ?  │ .  │ /  │ §  │              │       │    │       │ 1  │ 2  │ 3  │    │
/// ├────┴┬───┴─┬──┴──┬─┴────┴────┴────┴────┴────┴───┬┴────┼────┴┬──────┬──────┤  ┌────┼────┼────┐  ├────┴────┼────┤000a│
/// │     │     │     │             0020             │     │     │      │      │  │    │    │    │  │ 0       │ .  │    │
/// └─────┴─────┴─────┴──────────────────────────────┴─────┴─────┴──────┴──────┘  └────┴────┴────┘  └─────────┴────┴────┘
/// ```
///
/// ## Control
///
/// ```text
/// ┌────┐  ┌────┬────┬────┬────┐  ┌────┬────┬────┬────┐  ┌────┬────┬────┬────┐   ┌────┬────┬────┐
/// │001b│  │    │    │    │    │  │    │    │    │    │  │    │    │    │    │   │    │    │    │
/// └────┘  └────┴────┴────┴────┘  └────┴────┴────┴────┘  └────┴────┴────┴────┘   └────┴────┴────┘
///
/// ┌────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬─────────┐  ┌────┬────┬────┐  ┌────┬────┬────┬────┐
/// │ ²  │ &  │ é  │ "  │ '  │ (  │ -  │ è  │ _  │ ç  │ à  │ )  │ =  │   0008  │  │    │    │    │  │    │ /  │ *  │ -  │
/// ├────┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬────────┤  ├────┼────┼────┤  ├────┼────┼────┼────┤
/// │0009 │0001│001a│0005│0012│0014│0019│0015│0009│000f│0010│ ^  │ $  │  000a  │  │007f│    │    │  │ 7  │ 8  │ 9  │    │
/// ├─────┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┐       │  └────┴────┴────┘  ├────┼────┼────┤ +  │
/// │      │0011│0013│0004│0006│0007│0008│000a│000b│000c│000d│ ù  │ *  │       │                    │ 4  │ 5  │ 6  │    │
/// ├────┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴────┴───────┤       ┌────┐       ├────┼────┼────┼────┤
/// │    │ <  │0017│0018│0003│0016│0002│000e│ ,  │ ;  │ :  │ !  │              │       │    │       │ 1  │ 2  │ 3  │    │
/// ├────┴┬───┴─┬──┴──┬─┴────┴────┴────┴────┴────┴───┬┴────┼────┴┬──────┬──────┤  ┌────┼────┼────┐  ├────┴────┼────┤000a│
/// │     │     │     │             0020             │     │     │      │      │  │    │    │    │  │ 0       │ .  │    │
/// └─────┴─────┴─────┴──────────────────────────────┴─────┴─────┴──────┴──────┘  └────┴────┴────┘  └─────────┴────┴────┘
/// ```
///
/// ## AltGr
///
/// ```text
/// ┌────┐  ┌────┬────┬────┬────┐  ┌────┬────┬────┬────┐  ┌────┬────┬────┬────┐   ┌────┬────┬────┐
/// │001b│  │    │    │    │    │  │    │    │    │    │  │    │    │    │    │   │    │    │    │
/// └────┘  └────┴────┴────┴────┘  └────┴────┴────┴────┘  └────┴────┴────┴────┘   └────┴────┴────┘
///
/// ┌────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬─────────┐  ┌────┬────┬────┐  ┌────┬────┬────┬────┐
/// │ ²  │ &  │ ~  │ #  │ {  │ [  │ |  │ `  │ \  │ ^  │ @  │ ]  │ }  │   0008  │  │    │    │    │  │    │ /  │ *  │ -  │
/// ├────┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬────────┤  ├────┼────┼────┤  ├────┼────┼────┼────┤
/// │0009 │ a  │ z  │ €  │ r  │ t  │ y  │ u  │ i  │ o  │ p  │ ^  │ ¤  │  000a  │  │007f│    │    │  │ 7  │ 8  │ 9  │    │
/// ├─────┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┐       │  └────┴────┴────┘  ├────┼────┼────┤ +  │
/// │      │ q  │ s  │ d  │ f  │ g  │ h  │ j  │ k  │ l  │ m  │ ù  │ *  │       │                    │ 4  │ 5  │ 6  │    │
/// ├────┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴────┴───────┤       ┌────┐       ├────┼────┼────┼────┤
/// │    │ <  │ w  │ x  │ c  │ v  │ b  │ n  │ ,  │ ;  │ :  │ !  │              │       │    │       │ 1  │ 2  │ 3  │    │
/// ├────┴┬───┴─┬──┴──┬─┴────┴────┴────┴────┴────┴───┬┴────┼────┴┬──────┬──────┤  ┌────┼────┼────┐  ├────┴────┼────┤000a│
/// │     │     │     │             0020             │     │     │      │      │  │    │    │    │  │ 0       │ .  │    │
/// └─────┴─────┴─────┴──────────────────────────────┴─────┴─────┴──────┴──────┘  └────┴────┴────┘  └─────────┴────┴────┘
/// ```
///
/// ## Shift AltGr
///
/// ```text
/// ┌────┐  ┌────┬────┬────┬────┐  ┌────┬────┬────┬────┐  ┌────┬────┬────┬────┐   ┌────┬────┬────┐
/// │001b│  │    │    │    │    │  │    │    │    │    │  │    │    │    │    │   │    │    │    │
/// └────┘  └────┴────┴────┴────┘  └────┴────┴────┴────┘  └────┴────┴────┴────┘   └────┴────┴────┘
///
/// ┌────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬─────────┐  ┌────┬────┬────┐  ┌────┬────┬────┬────┐
/// │ ²  │ 1  │ ~  │ #  │ {  │ [  │ |  │ `  │ \  │ ^  │ @  │ ]  │ }  │   0008  │  │    │    │    │  │    │ /  │ *  │ -  │
/// ├────┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬────────┤  ├────┼────┼────┤  ├────┼────┼────┼────┤
/// │0009 │ A  │ Z  │ €  │ R  │ T  │ Y  │ U  │ I  │ O  │ P  │ ¨  │ ¤  │  000a  │  │007f│    │    │  │ 7  │ 8  │ 9  │    │
/// ├─────┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┐       │  └────┴────┴────┘  ├────┼────┼────┤ +  │
/// │      │ Q  │ S  │ D  │ F  │ G  │ H  │ J  │ K  │ L  │ M  │ %  │ µ  │       │                    │ 4  │ 5  │ 6  │    │
/// ├────┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴────┴───────┤       ┌────┐       ├────┼────┼────┼────┤
/// │    │ >  │ W  │ X  │ C  │ V  │ B  │ N  │ ?  │ .  │ /  │ §  │              │       │    │       │ 1  │ 2  │ 3  │    │
/// ├────┴┬───┴─┬──┴──┬─┴────┴────┴────┴────┴────┴───┬┴────┼────┴┬──────┬──────┤  ┌────┼────┼────┐  ├────┴────┼────┤000a│
/// │     │     │     │             0020             │     │     │      │      │  │    │    │    │  │ 0       │ .  │    │
/// └─────┴─────┴─────┴──────────────────────────────┴─────┴─────┴──────┴──────┘  └────┴────┴────┘  └─────────┴────┴────┘
/// ```
pub struct Azerty;

impl KeyboardLayout for Azerty {
    #[rustfmt::skip]
    fn map_keycode(
        &self,
        keycode: KeyCode,
        modifiers: &Modifiers,
        handle_ctrl: HandleControl,
    ) -> DecodedKey {
        match keycode {
            // ========= Row 2 (the numbers) =========
            KeyCode::Oem8      => DecodedKey::Unicode('²'),
            KeyCode::Key1      => modifiers.handle_shift('&', '1'),
            KeyCode::Key2      => modifiers.handle_altsh('é', '2', '~'),
            KeyCode::Key3      => modifiers.handle_altsh('"', '3', '#'),
            KeyCode::Key4      => modifiers.handle_altsh(QUO, '4', '{'),
            KeyCode::Key5      => modifiers.handle_altsh('(', '5', '['),
            KeyCode::Key6      => modifiers.handle_altsh('-', '6', '|'),
            KeyCode::Key7      => modifiers.handle_altsh('è', '7', '`'),
            KeyCode::Key8      => modifiers.handle_altsh('_', '8', SLS),
            KeyCode::Key9      => modifiers.handle_altsh('ç', '9', '^'),
            KeyCode::Key0      => modifiers.handle_altsh('à', '0', '@'),
            KeyCode::OemMinus  => modifiers.handle_altsh(')', '°', ']'),
            KeyCode::OemPlus   => modifiers.handle_altsh('=', '+', '}'),

            // ========= Row 3 (QWERTY) =========
            KeyCode::Q         => modifiers.handle_alpha('A', handle_ctrl),
            KeyCode::W         => modifiers.handle_alpha('Z', handle_ctrl),
            KeyCode::E         => modifiers.handle_alalt('E', '€', '€', handle_ctrl),
            KeyCode::Oem4      => modifiers.handle_shift('^', '¨'),
            KeyCode::Oem6      => modifiers.handle_altsh('$', '£', '¤'),

            // ========= Row 4 (ASDFG) =========
            KeyCode::A         => modifiers.handle_alpha('Q', handle_ctrl),
            KeyCode::Oem1      => modifiers.handle_alpha('M', handle_ctrl),
            KeyCode::Oem3      => modifiers.handle_shift('ù', '%'),
            KeyCode::Oem7      => modifiers.handle_shift('*', 'µ'),

            // ========= Row 5 (ZXCVB) =========
            KeyCode::Oem5      => modifiers.handle_shift('<', '>'),
            KeyCode::Z         => modifiers.handle_alpha('W', handle_ctrl),
            KeyCode::M         => modifiers.handle_shift(',', '?'),
            KeyCode::OemComma  => modifiers.handle_shift(';', '.'),
            KeyCode::OemPeriod => modifiers.handle_shift(':', '/'),
            KeyCode::Oem2      => modifiers.handle_shift('!', '§'),

            // ========= Fallback =========
            e => super::Us104Key.map_keycode(e, modifiers, handle_ctrl),
        }
    }

    fn get_physical(&self) -> PhysicalKeyboard {
        PhysicalKeyboard::Iso
    }
}

#[cfg(test)]
mod test {
    use super::*;
    use crate::{KeyCode, KeyEvent, KeyState, Keyboard, ScancodeSet2};

    #[test]
    fn test_frazert() {
        let mut k = Keyboard::new(
            ScancodeSet2::new(),
            Azerty,
            HandleControl::MapLettersToUnicode,
        );
        assert_eq!(
            k.process_keyevent(KeyEvent::new(KeyCode::NumpadDivide, KeyState::Down)),
            Some(DecodedKey::Unicode('/'))
        );
        assert_eq!(
            k.process_keyevent(KeyEvent::new(KeyCode::NumpadMultiply, KeyState::Down)),
            Some(DecodedKey::Unicode('*'))
        );
        assert_eq!(
            k.process_keyevent(KeyEvent::new(KeyCode::A, KeyState::Down)),
            Some(DecodedKey::Unicode('q'))
        );
        assert_eq!(
            k.process_keyevent(KeyEvent::new(KeyCode::Key4, KeyState::Down)),
            Some(DecodedKey::Unicode('\''))
        );
        assert_eq!(
            k.process_keyevent(KeyEvent::new(KeyCode::Oem5, KeyState::Down)),
            Some(DecodedKey::Unicode('<'))
        );
        assert_eq!(
            k.process_keyevent(KeyEvent::new(KeyCode::Oem7, KeyState::Down)),
            Some(DecodedKey::Unicode('*'))
        );
        assert_eq!(
            k.process_keyevent(KeyEvent::new(KeyCode::Numpad0, KeyState::Up)),
            None
        );
        assert_eq!(
            k.process_keyevent(KeyEvent::new(KeyCode::NumpadLock, KeyState::Down)),
            Some(DecodedKey::RawKey(KeyCode::NumpadLock))
        );
        assert_eq!(
            k.process_keyevent(KeyEvent::new(KeyCode::NumpadLock, KeyState::Up)),
            None
        );
        assert_eq!(
            k.process_keyevent(KeyEvent::new(KeyCode::Numpad0, KeyState::Down)),
            Some(DecodedKey::RawKey(KeyCode::Insert))
        );
        assert_eq!(
            k.process_keyevent(KeyEvent::new(KeyCode::Numpad0, KeyState::Up)),
            None
        );
    }
}
